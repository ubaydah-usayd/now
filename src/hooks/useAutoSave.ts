import { useEffect, useRef } from 'react';
import { useNowStore } from '../store';
import { firebaseManager } from '../utils/firebaseManager';
import { useAuth } from './useAuth';

export const useAutoSave = () => {
  const { saveState, syncTimerState } = useNowStore();
  const { user } = useAuth();
  const saveTimeoutRef = useRef<number | null>(null);

  // Fonction pour sauvegarder avec debounce
  const debouncedSave = () => {
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    saveTimeoutRef.current = window.setTimeout(() => {
      saveState();
    }, 1000); // Sauvegarder aprÃ¨s 1 seconde d'inactivitÃ©
  };

  // Ã‰couter les changements en temps rÃ©el de l'Ã©tat de l'application (seulement si connectÃ©)
  useEffect(() => {
    if (!user?.uid) {
      console.log('ðŸ”„ Pas d\'utilisateur connectÃ©, synchronisation locale uniquement');
      return;
    }

    console.log('ðŸ”„ Initialisation de l\'Ã©coute en temps rÃ©el pour l\'utilisateur:', user.uid);
    
    // Ã‰couter les changements de l'Ã©tat de l'application
    const unsubscribeAppState = firebaseManager.onAppStateChange((appState) => {
      console.log('ðŸ“¡ Changement d\'Ã©tat reÃ§u:', appState);
      
      // Mettre Ã  jour l'Ã©tat local si nÃ©cessaire
      if (appState.timer) {
        useNowStore.setState((state) => ({
          timer: {
            ...state.timer,
            ...appState.timer
          },
          activeSessionStart: appState.activeSessionStart || state.activeSessionStart,
          activeBreakStart: appState.activeBreakStart || state.activeBreakStart
        }));
      }
    });

    // Ã‰couter les changements des projets
    const unsubscribeProjects = firebaseManager.onProjectsChange((projects) => {
      console.log('ðŸ“¡ Changement de projets reÃ§u:', projects.length);
      useNowStore.setState({ projects });
    });

    // Ã‰couter les changements des tÃ¢ches
    const unsubscribeTasks = firebaseManager.onTasksChange((tasks) => {
      console.log('ðŸ“¡ Changement de tÃ¢ches reÃ§u:', tasks.length);
      useNowStore.setState({ tasks });
    });

    // Ã‰couter les changements des sessions
    const unsubscribeSessions = firebaseManager.onSessionsChange((sessions) => {
      console.log('ðŸ“¡ Changement de sessions reÃ§u:', sessions.length);
      useNowStore.setState({ sessions });
    });

    return () => {
      console.log('ðŸ”„ Nettoyage des listeners en temps rÃ©el');
      unsubscribeAppState();
      unsubscribeProjects();
      unsubscribeTasks();
      unsubscribeSessions();
    };
  }, [user?.uid]);

  // Sauvegarder quand l'utilisateur quitte la page
  useEffect(() => {
    const handleBeforeUnload = () => {
      saveState();
    };

    const handleVisibilityChange = () => {
      if (document.hidden) {
        saveState();
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [saveState]);

  return { debouncedSave, saveState, syncTimerState };
}; 